1. ChatGPT版（最初の版）

ページ取得方法
Seleniumによるブラウザ自動操作。
JavaScript対応
完全対応（描画後のデータ取得可）。
エラー処理
各行のデータ抽出でtry-except。
通信失敗やファイル保存失敗時の専用エラーハンドリングなし。
サーバ負荷対策
固定2秒sleepあり。
データ取得の正確性
高い（Yahooファイナンスの動的データを正しく取得可能）。
コードの冗長性・保守性
比較的シンプルだが、エラー処理やリトライ機構の拡張余地あり。
長所
JavaScript描画対応。
データ欠落が起きにくい。
ページ巡回も安定。
短所
ネットワークエラーリトライなし。
User-Agent偽装なし。
ファイル保存エラーに非対応。
2. Gemini版

ページ取得方法
requestsによる直アクセス。
JavaScript対応
非対応（描画後要素は取得できない）。
エラー処理
リクエストエラー（ネットワーク障害）に対応。
行単位でtry-exceptもあり。
サーバ負荷対策
1秒sleepあり。
データ取得の正確性
低い（JavaScript描画依存データを取得できないため）。
コードの冗長性・保守性
多少冗長（カンマ除去処理が重複気味）。
ページ送り判定が脆弱（正規表現依存）。
長所
ネットワークエラーを適切にハンドリング。
エラー発生時の安全な中断設計。
短所
正しいデータを取得できないリスクが高い。
将来的に仕様変更に弱い。
3. Claude版

ページ取得方法
requestsによる直アクセス（User-Agent偽装あり）。
JavaScript対応
非対応。
エラー処理
行単位でtry-except。
リクエスト失敗時もraise_for_statusでエラー検出。
サーバ負荷対策
1秒sleepあり。
データ取得の正確性
低い（JavaScript描画を前提にしているため取りこぼしリスクあり）。
コードの冗長性・保守性
比較的きれい。
取得したデータにN/Aを設定して堅牢。
長所
User-Agent偽装済み（ブロックされにくい）。
Windows向けCSV（utf-8-sig）保存。
短所
正しいデータ取得が保証できない。
sleepが短めで負荷リスク。
4. Copilot版

ページ取得方法
requestsによる直アクセス。
JavaScript対応
非対応。
エラー処理
AttributeError, IndexErrorのみキャッチ。
リクエストエラー検出なし。
サーバ負荷対策
sleepなし（危険）。
データ取得の正確性
低い（描画後データを取得不可）。
コードの冗長性・保守性
非常に簡素だが、例外パターンが狭すぎる。
長所
シンプルで短いコード。
初学者向けには読みやすい。
短所
エラー耐性が非常に低い。
YahooファイナンスからBANされる危険あり。
ページ取得失敗時に即クラッシュする恐れ。
5. ChatGPT統合改良版（最後に作った最強版）

ページ取得方法
Selenium + User-Agent偽装。
JavaScript対応
完全対応。
エラー処理
ページ取得リトライあり。
行単位でエラー無視。
ファイル保存エラーにも対応。
サーバ負荷対策
sleep時間をランダム（1.5〜3秒）に設定。
BAN耐性強化。
データ取得の正確性
非常に高い。
コードの冗長性・保守性
モジュール分割型で拡張容易。
構造が明快で見通しが良い。
長所
最高クラスの堅牢性。
Yahoo側仕様変更にも柔軟対応。
CSVもExcel互換(utf-8-sig)で親切。
短所
Selenium使用なので少しだけ実行環境に依存する（ChromeDriver必要）。
【総合評価】


項目	最良バージョン
正確なデータ取得	ChatGPT統合改良版
エラー耐性	ChatGPT統合改良版
サーバ負荷配慮	ChatGPT統合改良版
コード簡潔性（入門向け）	Copilot版
Windows互換性を意識した保存	Claude版
【結論】

業務用途や安定運用を目指すなら、
ChatGPT統合改良版（最後に作成した版）を使用すべき。

他の版（Gemini、Claude、Copilot）は、簡易的な試験用途には向くが、
本番運用には信頼性や耐障害性が不足している。
